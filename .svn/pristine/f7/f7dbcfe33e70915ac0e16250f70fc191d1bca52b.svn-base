<?php
defined ( 'BASEPATH' ) or exit ( 'No direct script access allowed' );

/*
 * Controlar de Pedidos
 */
class Pedido extends CI_Controller {
	public function index() {
		$this->Listado ();
	}
	
	
	/**
	 * ********************************************* V_pedido *****************************************************************************
	 */
	
	/*
	 * SALIDA Despliega controles para agregar un nuevo pedido
	 */
	public function nuevoPedido($idPed = -1) {
		
		if (! $this->ion_auth->logged_in ()) {
			redirect ( 'auth/login' );
		} else {
			
			// Para agregar un pedido se necesita un cliente ya creado.
			$dataContent ['titleHeader'] = $this->lang->line ( 'i_titleHeader' );
			$dataContent ['descHeader'] = $this->lang->line ( 'i_descHeader' );
			
			// Frases
			$dataContent ['p_nuevopedido'] = $this->lang->line ( 'p_nuevopedido' );
			$dataContent ['p_formselectcliente'] = $this->lang->line ( 'p_formselectcliente' );
			$dataContent ['p_linknuevocliente'] = $this->lang->line ( 'p_linknuevocliente' );
			$dataContent ['p_headerdatospedido'] = $this->lang->line ( 'p_headerdatospedido' );
			$dataContent ['p_fechaingresopedido'] = $this->lang->line ( 'p_fechaingresopedido' );
			$dataContent ['p_diasestimados'] = $this->lang->line ( 'p_diasestimados' );
			
			//INicialización control estado
			$dataContent ['vEstados'] =  $this->M_estados->get_Estados();
			
			
			$dataContent['pedEdit'] = array (
					'id' =>-1,
					'cli_id' => '',
					'cli_nom' => '',
					'est_fec_ing' => '',
					'est_fec_estactual' => 0,
					'costo' => 0,
					'est_esecuencia' => 0,
					'ConFactura' => 0,
					'comision' => 0,
					'diastranscurridos'=>0
			);
			if ($this->existePedido($idPed))
			{
				//Editar
				$dataContent['descHeader']   =  "Editar pedido id ";
				$pededit = $this->M_pedido->get_Pedido($idPed);
				if (count($pededit)==0)
					redirect('Pedido/nuevoPedido');
					$dataContent['pedEdit'] = $pededit[0];
					
				//Comentarios
				$dataContent ['comm'] = $this->M_Comentarios->get_Comments($idPed);
			}else 
				$dataContent ['comm'] = new ArrayObject();
			
			$this->load->template ( 'v_pedido', $dataContent );
		}
	}
	
	/**
	 * Elimina una línea del detalle del pedido.  
	 */	
	public function EliminaLineaDetalle()
	{
		if (! $this->ion_auth->logged_in ()) {
			redirect ( 'auth/login' );
		}
		$id_detalle = $this->input->post ( 'id_detalle' );
		echo json_encode($this->M_pedido->drop_line($id_detalle));
	}
	/**
	 * *
	 * AJAX: Graba una línea de detalle para un pedido.
	 *
	 * @return el id de la línea recien ingresada.
	 */
	public function grabaDetalle() {
		if (! $this->ion_auth->logged_in ()) {
			redirect ( 'auth/login' );
		}
		
		$id_pedido = $this->input->post ( 'idpedido' );
		$cant = $this->input->post ( 'cantidad' );
		$idprod = $this->input->post ( 'idproducto' );
		$monto_cos = $this->input->post ( 'costoventa' );
		$monto_precio = $this->input->post ( 'precioventa' );
		
		$data = $this->M_pedido->insert_entry_det($id_pedido,
													$cant,
													$idprod,
													$monto_cos,
													$monto_precio);
		$arr = array ('id' => $id_pedido);
		echo json_encode ( $arr );
	}
	
	public function grabaCabecera()
	{
		if (! $this->ion_auth->logged_in ()) {
			redirect ( 'auth/login' );
		}
		
		$id_pedido  = $this->input->post ( 'idpedido' );
		$id_cliente = $this->input->post ( 'idcliente' );
		$fecha_ing  =  $this->input->post ( 'fecha_ingreso' );
		$idestado   = $this->input->post ( 'idestado' );
		//$comision  =  $this->input->post ( 'comision' )=="false"?FALSE:TRUE;
		// Si existe ingreso nueva cabecera sino actualizo
		if (!$this->existePedido($id_pedido))
		{
			$comentario = "Pedido Ingresado correctamente el " .$fecha_ing; 
			//Inserto cabecera 
			$id_pedido = $this->insertCabecera($id_cliente,$fecha_ing);
			
			//graba comentario inicial del pedido
 			$this->creaComentarioPorId($id_pedido,$comentario,$idestado);
		}
		
		//Valido si tiene comision para asignar la comision x defecto.
		if($this->porcentajeTotalPedido($id_pedido)<>100){
		
			//Elimino cualquier comision previa por que no suma 100 entonces no sirve
			$this->M_Cuenta->eliminaPorcentajeExistente($id_pedido);
		
			//Creo comision con cuentaprincipal 100% porcentaje
			$cta = $this->M_Cuenta->getCuentaPrincipal();
			$this->M_Cuenta->insertaComision($cta,$porcentaje=100,$id_pedido);
		}
		
		//porcentaje 0 cuenta proveedor 2
		$cta_pro = $this->M_Cuenta->get_CuentaTipo(2);
		if(!$this->M_Cuenta->tieneCuentaTipo($id_pedido,2))
			$this->M_Cuenta->insertaComision($cta_pro,$porcentaje=0,$id_pedido);
		
		//porcentaje 0 cuenta cliente 0
		$cta_cli = $this->M_Cuenta->get_CuentaTipo(0);
		if(!$this->M_Cuenta->tieneCuentaTipo($id_pedido,0))
			$this->M_Cuenta->insertaComision($cta_cli,$porcentaje=0,$id_pedido);
		
		
		//Estado actual con fecha del sistema
		$estadoactual = $this->creaEstadoPorID($idestado, $id_pedido,new DateTime('America/Argentina/Mendoza'));
		
		//Actualizo cabecera
		$this->updateCabecera($id_pedido,$estadoactual,$fecha_ing);
	
		
		$arr = array ('id' => $id_pedido);
		echo json_encode ( $arr );
	}

	/*
	 * Graba estado cambioestado para una cabecera
	 */
	public function creaEstadoPorID($idestado,$idcabecera,$fecha)
	{
		
		if (! $this->ion_auth->logged_in ()) {
			redirect ( 'auth/login' );
		}
		$user = $this->ion_auth->user()->row();
		$idusuario = $user->id;
		$idestado = $this->M_estados->insert_entry($idcabecera, 
												   $idestado, 
				  							       $fecha, 
												   $idusuario);
		return $idestado;
	}
	/**
	 * Crea un registro en la tabla Comentario para una cabecera registra un estado
	 * @param unknown $idcabecera
	 * @param unknown $comentario
	 * @param unknown $estado
	 */
	public function creaComentarioPorId($idcabecera,$comentario,$estado)
	{
		$user = $this->ion_auth->user()->row();
		$idusuario = $user->id;
		
		
		$idcomment = $this->M_Comentarios->insert_entry($idcabecera,$idusuario,$estado,$comentario,new DateTime('America/Argentina/Mendoza'));
	}
	
	public function updateCabecera($id_pedido,$idestado,$fecha)
	{
		if (! $this->ion_auth->logged_in ())
			redirect ( 'auth/login' );
		$idnuevocabecera = $this->M_pedido->update_entry_cab($id_pedido,$idestado,$fecha);
		return $idnuevocabecera;
	}
	
	/**
	 * Método que actualiza la propiedad con factura, para controlar si el envio es con factura. 
	 */
	public function ActualizaCF()
	{
		$id_pedido  = $this->input->post ( 'idpedido' );
		$chkiva  = $this->input->post ( 'chk_iva_val' )=="false"?FALSE:TRUE;
		
		$this->M_pedido->update_factura($id_pedido,$chkiva);
		
		$arr = array ('id' => $id_pedido);
		echo json_encode ( $arr );
		
	}
	
	/**
	 * *
	 * AJAX : Graba un nuevo registro en tabla CABECERA
	 *
	 * @return Obj. JSOn con el id del objeto recien ingresado.
	 * $id_pedido,$id_cliente,$fecha_ing,$estadoactual
	 */
	public function insertCabecera($id_cliente, $fecha) {
		
		if (! $this->ion_auth->logged_in ())
			redirect ( 'auth/login' );
		
		$idnuevocabecera = $this->M_pedido->insert_entry_cab($id_cliente,$fecha);
		return $idnuevocabecera;
	}
	/** Retorna si un periodo está en la base de datos.
	 *
	 * @param int $idpedido
	 *        	el pedido a buscar.
	 */
	public function existePedido($idpedido){
		
		if ($idpedido == -1)
			return false;
		
		return  $this->M_pedido->existePedido($idpedido);
		
	}
	
	public function porcentajeTotalPedido($idpedido){
		if ($idpedido == -1)
			return false;

		return  $this->M_Cuenta->porcentajeTotalPedido($idpedido);
	}
	
	
	public function Conta()
	{
		if (! $this->ion_auth->logged_in ()) {
			redirect ( 'auth/login' );
		}
		$idpedido = $this->input->post( 'idpedido' );
		$data = $this->M_pedido->get_indicadores_pedido ($idpedido);
		echo json_encode ($data);
	}
	
	
	public function eliminaPedido(){
	    
	    if (! $this->ion_auth->logged_in ()) {redirect ( 'auth/login' );}
	    
	    $id_pedido  = $this->input->post ('id');
	    
	    echo json_encode($this->M_pedido->eliminaPedido($id_pedido));
	}
	
	
	/**
	 * AJAX : Obtiene las lineas de detalle de un pedido
	 *
	 * @return Obj. JSON con las lineas de detalle
	 */
	public function ajax_getLinesPedido($id_cabecera) {
		if (! $this->ion_auth->logged_in ()) {
			redirect ( 'auth/login' );
		}
	
		If ($id_cabecera == "")
		$id_cabecera = "-1"; // Criterio para despistar
	
		$data = $this->M_pedido->get_detalle_pedido ( $id_cabecera );
	
		echo json_encode ($data);
	} 
	
	/**
	 * ********************************************* V_pedido_listado *****************************************************************************
	 */
	/*
	 * SALIDA listado de pedidos
	 */
	public function Listado() {
		$dataContent ['titleHeader'] = "Pedidos";
		$dataContent ['descHeader'] = "Panel de pedidos";
	
		//inicialización control estado
		$dataContent ['vEstados'] =  $this->M_estados->get_Estados();
		/* Seguridad   */
		if (! $this->ion_auth->logged_in ()) {
			redirect ( 'auth/login' );
		} else {
			$this->load->template ( 'v_pedido_listado', $dataContent );
		}
	}
	/* AJAX : METODO pedidos en base a un criterio
	 */
	public function listadoPedidos()
	{
		$json = file_get_contents('php://input');
		$obj = json_decode($json);
		isset ($obj->search)?$criterio = $obj->search:$criterio =  "" ;
		isset ($obj->limit)?$limit = $obj->limit:$limit = "10000" ;
		isset ($obj->sort)?$ordenarpor =  $obj->sort:$ordenarpor =  "numeroPedido" ;
		isset ($obj->order)?$orden =  $obj->order:$orden =  "desc" ;
		isset ($obj->slestado)?$slestado =  $obj->slestado: $slestado =  array('0','1','2','3') ;
		isset ($obj->cliente)?$cliente =  $obj->cliente: $cliente =  "todos";
		
		isset ($obj->slcomision)?$slcomision =  $obj->slcomision:$slcomision = "-1";
		

		if (! $this->ion_auth->logged_in ()) {
			redirect ( 'auth/login' );
		}
		$data = $this->M_pedido->get_ListadoPedido($criterio,$limit,$slestado,$ordenarpor,$orden,$slcomision,$cliente);
		//var_dump($data);
		// Transformo los nombres para evitar problemas entre JSON y los tildes y otros caracteres
		
		$data2['rows'] = $data;
		$data2['total'] = count($data);
		
		echo json_encode($data2);
		//exit(0);
		//echo json_encode ( $data );
		//echo json_encode ( $data );
	}
	
	
	public function Seguimiento($id_pedido)
	{
		/* Seguridad   */
		if (! $this->ion_auth->logged_in ()) {
			redirect ( 'auth/login' );
		} else {
			
			//Pedido a procesar
			if ($this->existe($id_pedido))
			{
				$dataContent ['id_pedido'] = $id_pedido;
				$this->load->template ( 'v_pedido_cmm', $dataContent );
			}
		}
	}
	

	
	/**
	 * Salir del Sistema
	 */
	public function salir() {
		$this->load->library ( 'ion_auth' );
		$this->ion_auth->logout ();
		redirect ( 'auth/login' );
	}
	
	
	
}
